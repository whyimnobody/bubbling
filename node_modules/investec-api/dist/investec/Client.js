"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const investec_1 = require("../util/investec");
const model_1 = require("../util/model");
const Account_1 = require("./Account");
const Card_1 = require("./Card");
class Client {
    constructor(clientId, clientSecret) {
        this.clientId = clientId;
        this.clientSecret = clientSecret;
    }
    static create(clientId, clientSecret) {
        return __awaiter(this, void 0, void 0, function* () {
            const client = new Client(clientId, clientSecret);
            yield client.authenticate();
            return client;
        });
    }
    authenticate() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield (0, investec_1.getInvestecToken)(this.clientId, this.clientSecret);
            if ((0, model_1.isResponseBad)(response)) {
                throw new Error(`bad response from investect auth: ${response}`);
            }
            this.token = response;
        });
    }
    getAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.token) {
                throw new Error("client is not set up");
            }
            const accounts = yield (0, investec_1.getInvestecAccounts)(this.token.access_token);
            if ((0, model_1.isResponseBad)(accounts)) {
                throw new Error("not ok response from getting accounts: " + accounts);
            }
            return accounts.data.accounts.map((a) => new Account_1.Account(this, a));
        });
    }
    getCards() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.token) {
                throw new Error("client is not set up");
            }
            const accounts = yield (0, investec_1.getInvestecCards)(this.token.access_token);
            if ((0, model_1.isResponseBad)(accounts)) {
                throw new Error("not ok response from getting cards: " + accounts);
            }
            return accounts.data.cards.map((c) => new Card_1.Card(this, c));
        });
    }
}
exports.Client = Client;
//# sourceMappingURL=Client.js.map